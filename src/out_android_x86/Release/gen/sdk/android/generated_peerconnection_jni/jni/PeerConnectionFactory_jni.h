// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/PeerConnectionFactory

#ifndef org_webrtc_PeerConnectionFactory_JNI
#define org_webrtc_PeerConnectionFactory_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_PeerConnectionFactory[];
const char kClassPath_org_webrtc_PeerConnectionFactory[] =
    "org/webrtc/PeerConnectionFactory";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_PeerConnectionFactory_00024Options[];
const char kClassPath_org_webrtc_PeerConnectionFactory_00024Options[] =
    "org/webrtc/PeerConnectionFactory$Options";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_PeerConnectionFactory_clazz = 0;
#ifndef org_webrtc_PeerConnectionFactory_clazz_defined
#define org_webrtc_PeerConnectionFactory_clazz_defined
inline jclass org_webrtc_PeerConnectionFactory_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_PeerConnectionFactory,
      &g_org_webrtc_PeerConnectionFactory_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_PeerConnectionFactory_00024Options_clazz = 0;
#ifndef org_webrtc_PeerConnectionFactory_00024Options_clazz_defined
#define org_webrtc_PeerConnectionFactory_00024Options_clazz_defined
inline jclass org_webrtc_PeerConnectionFactory_00024Options_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_PeerConnectionFactory_00024Options,
      &g_org_webrtc_PeerConnectionFactory_00024Options_clazz);
}
#endif

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnectionFactory_00024Options_getNetworkIgnoreMask = 0;
static jint Java_Options_getNetworkIgnoreMask(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnectionFactory_00024Options_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnectionFactory_00024Options_clazz(env),
      "getNetworkIgnoreMask",
"("
")"
"I",
      &g_org_webrtc_PeerConnectionFactory_00024Options_getNetworkIgnoreMask);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnectionFactory_00024Options_getDisableEncryption = 0;
static jboolean Java_Options_getDisableEncryption(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnectionFactory_00024Options_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnectionFactory_00024Options_clazz(env),
      "getDisableEncryption",
"("
")"
"Z",
      &g_org_webrtc_PeerConnectionFactory_00024Options_getDisableEncryption);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnectionFactory_00024Options_getDisableNetworkMonitor =
    0;
static jboolean Java_Options_getDisableNetworkMonitor(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnectionFactory_00024Options_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnectionFactory_00024Options_clazz(env),
      "getDisableNetworkMonitor",
"("
")"
"Z",
&g_org_webrtc_PeerConnectionFactory_00024Options_getDisableNetworkMonitor);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnectionFactory_onNetworkThreadReady = 0;
static void Java_PeerConnectionFactory_onNetworkThreadReady(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_PeerConnectionFactory_clazz(env),
      org_webrtc_PeerConnectionFactory_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_PeerConnectionFactory_clazz(env),
      "onNetworkThreadReady",
"("
")"
"V",
      &g_org_webrtc_PeerConnectionFactory_onNetworkThreadReady);

     env->CallStaticVoidMethod(org_webrtc_PeerConnectionFactory_clazz(env),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnectionFactory_onWorkerThreadReady = 0;
static void Java_PeerConnectionFactory_onWorkerThreadReady(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_PeerConnectionFactory_clazz(env),
      org_webrtc_PeerConnectionFactory_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_PeerConnectionFactory_clazz(env),
      "onWorkerThreadReady",
"("
")"
"V",
      &g_org_webrtc_PeerConnectionFactory_onWorkerThreadReady);

     env->CallStaticVoidMethod(org_webrtc_PeerConnectionFactory_clazz(env),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnectionFactory_onSignalingThreadReady = 0;
static void Java_PeerConnectionFactory_onSignalingThreadReady(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_PeerConnectionFactory_clazz(env),
      org_webrtc_PeerConnectionFactory_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_PeerConnectionFactory_clazz(env),
      "onSignalingThreadReady",
"("
")"
"V",
      &g_org_webrtc_PeerConnectionFactory_onSignalingThreadReady);

     env->CallStaticVoidMethod(org_webrtc_PeerConnectionFactory_clazz(env),
          method_id);
  jni_generator::CheckException(env);
}

#endif  // org_webrtc_PeerConnectionFactory_JNI
