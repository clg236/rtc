// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/RtpSender

#ifndef org_webrtc_RtpSender_JNI
#define org_webrtc_RtpSender_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_RtpSender[];
const char kClassPath_org_webrtc_RtpSender[] = "org/webrtc/RtpSender";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_webrtc_RtpSender_clazz =
    0;
#ifndef org_webrtc_RtpSender_clazz_defined
#define org_webrtc_RtpSender_clazz_defined
inline jclass org_webrtc_RtpSender_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_RtpSender,
      &g_org_webrtc_RtpSender_clazz);
}
#endif

// Step 2: method stubs.

static base::subtle::AtomicWord g_org_webrtc_RtpSender_Constructor = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RtpSender_Constructor(JNIEnv* env, jlong nativeRtpSender) {
  CHECK_CLAZZ(env, org_webrtc_RtpSender_clazz(env),
      org_webrtc_RtpSender_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_RtpSender_clazz(env),
      "<init>",
"("
"J"
")"
"V",
      &g_org_webrtc_RtpSender_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_RtpSender_clazz(env),
          method_id, nativeRtpSender);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_webrtc_RtpSender_JNI
