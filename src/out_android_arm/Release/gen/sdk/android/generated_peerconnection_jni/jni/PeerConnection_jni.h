// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/PeerConnection

#ifndef org_webrtc_PeerConnection_JNI
#define org_webrtc_PeerConnection_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_PeerConnection_00024Observer[];
const char kClassPath_org_webrtc_PeerConnection_00024Observer[] =
    "org/webrtc/PeerConnection$Observer";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_PeerConnection_00024IceGatheringState[];
const char kClassPath_org_webrtc_PeerConnection_00024IceGatheringState[] =
    "org/webrtc/PeerConnection$IceGatheringState";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_PeerConnection_00024IceServer[];
const char kClassPath_org_webrtc_PeerConnection_00024IceServer[] =
    "org/webrtc/PeerConnection$IceServer";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_PeerConnection_00024IceConnectionState[];
const char kClassPath_org_webrtc_PeerConnection_00024IceConnectionState[] =
    "org/webrtc/PeerConnection$IceConnectionState";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_PeerConnection_00024RTCConfiguration[];
const char kClassPath_org_webrtc_PeerConnection_00024RTCConfiguration[] =
    "org/webrtc/PeerConnection$RTCConfiguration";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_PeerConnection[];
const char kClassPath_org_webrtc_PeerConnection[] = "org/webrtc/PeerConnection";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_PeerConnection_00024SignalingState[];
const char kClassPath_org_webrtc_PeerConnection_00024SignalingState[] =
    "org/webrtc/PeerConnection$SignalingState";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_PeerConnection_00024IntervalRange[];
const char kClassPath_org_webrtc_PeerConnection_00024IntervalRange[] =
    "org/webrtc/PeerConnection$IntervalRange";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_clazz = 0;
#ifndef org_webrtc_PeerConnection_00024Observer_clazz_defined
#define org_webrtc_PeerConnection_00024Observer_clazz_defined
inline jclass org_webrtc_PeerConnection_00024Observer_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_PeerConnection_00024Observer,
      &g_org_webrtc_PeerConnection_00024Observer_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceGatheringState_clazz = 0;
#ifndef org_webrtc_PeerConnection_00024IceGatheringState_clazz_defined
#define org_webrtc_PeerConnection_00024IceGatheringState_clazz_defined
inline jclass org_webrtc_PeerConnection_00024IceGatheringState_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_PeerConnection_00024IceGatheringState,
      &g_org_webrtc_PeerConnection_00024IceGatheringState_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceServer_clazz = 0;
#ifndef org_webrtc_PeerConnection_00024IceServer_clazz_defined
#define org_webrtc_PeerConnection_00024IceServer_clazz_defined
inline jclass org_webrtc_PeerConnection_00024IceServer_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_PeerConnection_00024IceServer,
      &g_org_webrtc_PeerConnection_00024IceServer_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceConnectionState_clazz = 0;
#ifndef org_webrtc_PeerConnection_00024IceConnectionState_clazz_defined
#define org_webrtc_PeerConnection_00024IceConnectionState_clazz_defined
inline jclass org_webrtc_PeerConnection_00024IceConnectionState_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_PeerConnection_00024IceConnectionState,
      &g_org_webrtc_PeerConnection_00024IceConnectionState_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_clazz = 0;
#ifndef org_webrtc_PeerConnection_00024RTCConfiguration_clazz_defined
#define org_webrtc_PeerConnection_00024RTCConfiguration_clazz_defined
inline jclass org_webrtc_PeerConnection_00024RTCConfiguration_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_PeerConnection_00024RTCConfiguration,
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_clazz = 0;
#ifndef org_webrtc_PeerConnection_clazz_defined
#define org_webrtc_PeerConnection_clazz_defined
inline jclass org_webrtc_PeerConnection_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_PeerConnection,
      &g_org_webrtc_PeerConnection_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024SignalingState_clazz = 0;
#ifndef org_webrtc_PeerConnection_00024SignalingState_clazz_defined
#define org_webrtc_PeerConnection_00024SignalingState_clazz_defined
inline jclass org_webrtc_PeerConnection_00024SignalingState_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_PeerConnection_00024SignalingState,
      &g_org_webrtc_PeerConnection_00024SignalingState_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IntervalRange_clazz = 0;
#ifndef org_webrtc_PeerConnection_00024IntervalRange_clazz_defined
#define org_webrtc_PeerConnection_00024IntervalRange_clazz_defined
inline jclass org_webrtc_PeerConnection_00024IntervalRange_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_PeerConnection_00024IntervalRange,
      &g_org_webrtc_PeerConnection_00024IntervalRange_clazz);
}
#endif

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceGatheringState_fromNativeIndex = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_IceGatheringState_fromNativeIndex(JNIEnv* env, JniIntWrapper
    nativeIndex) {
  CHECK_CLAZZ(env, org_webrtc_PeerConnection_00024IceGatheringState_clazz(env),
      org_webrtc_PeerConnection_00024IceGatheringState_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_PeerConnection_00024IceGatheringState_clazz(env),
      "fromNativeIndex",
"("
"I"
")"
"Lorg/webrtc/PeerConnection$IceGatheringState;",
      &g_org_webrtc_PeerConnection_00024IceGatheringState_fromNativeIndex);

  jobject ret =
env->CallStaticObjectMethod(org_webrtc_PeerConnection_00024IceGatheringState_clazz(env),
          method_id, as_jint(nativeIndex));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceConnectionState_fromNativeIndex = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_IceConnectionState_fromNativeIndex(JNIEnv* env, JniIntWrapper
    nativeIndex) {
  CHECK_CLAZZ(env, org_webrtc_PeerConnection_00024IceConnectionState_clazz(env),
      org_webrtc_PeerConnection_00024IceConnectionState_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_PeerConnection_00024IceConnectionState_clazz(env),
      "fromNativeIndex",
"("
"I"
")"
"Lorg/webrtc/PeerConnection$IceConnectionState;",
      &g_org_webrtc_PeerConnection_00024IceConnectionState_fromNativeIndex);

  jobject ret =
env->CallStaticObjectMethod(org_webrtc_PeerConnection_00024IceConnectionState_clazz(env),
          method_id, as_jint(nativeIndex));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024SignalingState_fromNativeIndex = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SignalingState_fromNativeIndex(JNIEnv* env, JniIntWrapper nativeIndex)
    {
  CHECK_CLAZZ(env, org_webrtc_PeerConnection_00024SignalingState_clazz(env),
      org_webrtc_PeerConnection_00024SignalingState_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_PeerConnection_00024SignalingState_clazz(env),
      "fromNativeIndex",
"("
"I"
")"
"Lorg/webrtc/PeerConnection$SignalingState;",
      &g_org_webrtc_PeerConnection_00024SignalingState_fromNativeIndex);

  jobject ret =
env->CallStaticObjectMethod(org_webrtc_PeerConnection_00024SignalingState_clazz(env),
          method_id, as_jint(nativeIndex));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onSignalingChange = 0;
static void Java_Observer_onSignalingChange(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    newState) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onSignalingChange",
"("
"Lorg/webrtc/PeerConnection$SignalingState;"
")"
"V",
      &g_org_webrtc_PeerConnection_00024Observer_onSignalingChange);

     env->CallVoidMethod(obj.obj(),
          method_id, newState.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onIceConnectionChange = 0;
static void Java_Observer_onIceConnectionChange(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    newState) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onIceConnectionChange",
"("
"Lorg/webrtc/PeerConnection$IceConnectionState;"
")"
"V",
      &g_org_webrtc_PeerConnection_00024Observer_onIceConnectionChange);

     env->CallVoidMethod(obj.obj(),
          method_id, newState.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onIceConnectionReceivingChange =
    0;
static void Java_Observer_onIceConnectionReceivingChange(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean receiving) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onIceConnectionReceivingChange",
"("
"Z"
")"
"V",
&g_org_webrtc_PeerConnection_00024Observer_onIceConnectionReceivingChange);

     env->CallVoidMethod(obj.obj(),
          method_id, receiving);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onIceGatheringChange = 0;
static void Java_Observer_onIceGatheringChange(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    newState) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onIceGatheringChange",
"("
"Lorg/webrtc/PeerConnection$IceGatheringState;"
")"
"V",
      &g_org_webrtc_PeerConnection_00024Observer_onIceGatheringChange);

     env->CallVoidMethod(obj.obj(),
          method_id, newState.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onIceCandidate = 0;
static void Java_Observer_onIceCandidate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    candidate) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onIceCandidate",
"("
"Lorg/webrtc/IceCandidate;"
")"
"V",
      &g_org_webrtc_PeerConnection_00024Observer_onIceCandidate);

     env->CallVoidMethod(obj.obj(),
          method_id, candidate.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onIceCandidatesRemoved = 0;
static void Java_Observer_onIceCandidatesRemoved(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobjectArray>& candidates) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onIceCandidatesRemoved",
"("
"[Lorg/webrtc/IceCandidate;"
")"
"V",
      &g_org_webrtc_PeerConnection_00024Observer_onIceCandidatesRemoved);

     env->CallVoidMethod(obj.obj(),
          method_id, candidates.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onAddStream = 0;
static void Java_Observer_onAddStream(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    stream) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onAddStream",
"("
"Lorg/webrtc/MediaStream;"
")"
"V",
      &g_org_webrtc_PeerConnection_00024Observer_onAddStream);

     env->CallVoidMethod(obj.obj(),
          method_id, stream.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onRemoveStream = 0;
static void Java_Observer_onRemoveStream(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    stream) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onRemoveStream",
"("
"Lorg/webrtc/MediaStream;"
")"
"V",
      &g_org_webrtc_PeerConnection_00024Observer_onRemoveStream);

     env->CallVoidMethod(obj.obj(),
          method_id, stream.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onDataChannel = 0;
static void Java_Observer_onDataChannel(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    dataChannel) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onDataChannel",
"("
"Lorg/webrtc/DataChannel;"
")"
"V",
      &g_org_webrtc_PeerConnection_00024Observer_onDataChannel);

     env->CallVoidMethod(obj.obj(),
          method_id, dataChannel.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onRenegotiationNeeded = 0;
static void Java_Observer_onRenegotiationNeeded(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onRenegotiationNeeded",
"("
")"
"V",
      &g_org_webrtc_PeerConnection_00024Observer_onRenegotiationNeeded);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024Observer_onAddTrack = 0;
static void Java_Observer_onAddTrack(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    receiver,
    const base::android::JavaRef<jobjectArray>& mediaStreams) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024Observer_clazz(env),
      "onAddTrack",
"("
"Lorg/webrtc/RtpReceiver;"
"[Lorg/webrtc/MediaStream;"
")"
"V",
      &g_org_webrtc_PeerConnection_00024Observer_onAddTrack);

     env->CallVoidMethod(obj.obj(),
          method_id, receiver.obj(), mediaStreams.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceServer_getUrls = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_IceServer_getUrls(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024IceServer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024IceServer_clazz(env),
      "getUrls",
"("
")"
"Ljava/util/List;",
      &g_org_webrtc_PeerConnection_00024IceServer_getUrls);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceServer_getUsername = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_IceServer_getUsername(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024IceServer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024IceServer_clazz(env),
      "getUsername",
"("
")"
"Ljava/lang/String;",
      &g_org_webrtc_PeerConnection_00024IceServer_getUsername);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceServer_getPassword = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_IceServer_getPassword(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024IceServer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024IceServer_clazz(env),
      "getPassword",
"("
")"
"Ljava/lang/String;",
      &g_org_webrtc_PeerConnection_00024IceServer_getPassword);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceServer_getTlsCertPolicy = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_IceServer_getTlsCertPolicy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024IceServer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024IceServer_clazz(env),
      "getTlsCertPolicy",
"("
")"
"Lorg/webrtc/PeerConnection$TlsCertPolicy;",
      &g_org_webrtc_PeerConnection_00024IceServer_getTlsCertPolicy);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceServer_getHostname = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_IceServer_getHostname(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024IceServer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024IceServer_clazz(env),
      "getHostname",
"("
")"
"Ljava/lang/String;",
      &g_org_webrtc_PeerConnection_00024IceServer_getHostname);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceServer_getTlsAlpnProtocols = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_IceServer_getTlsAlpnProtocols(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024IceServer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024IceServer_clazz(env),
      "getTlsAlpnProtocols",
"("
")"
"Ljava/util/List;",
      &g_org_webrtc_PeerConnection_00024IceServer_getTlsAlpnProtocols);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IceServer_getTlsEllipticCurves = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_IceServer_getTlsEllipticCurves(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024IceServer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024IceServer_clazz(env),
      "getTlsEllipticCurves",
"("
")"
"Ljava/util/List;",
      &g_org_webrtc_PeerConnection_00024IceServer_getTlsEllipticCurves);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IntervalRange_getMin = 0;
static jint Java_IntervalRange_getMin(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024IntervalRange_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024IntervalRange_clazz(env),
      "getMin",
"("
")"
"I",
      &g_org_webrtc_PeerConnection_00024IntervalRange_getMin);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024IntervalRange_getMax = 0;
static jint Java_IntervalRange_getMax(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024IntervalRange_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024IntervalRange_clazz(env),
      "getMax",
"("
")"
"I",
      &g_org_webrtc_PeerConnection_00024IntervalRange_getMax);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceTransportsType = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getIceTransportsType(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getIceTransportsType",
"("
")"
"Lorg/webrtc/PeerConnection$IceTransportsType;",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceTransportsType);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceServers = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getIceServers(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getIceServers",
"("
")"
"Ljava/util/List;",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceServers);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getBundlePolicy = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getBundlePolicy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getBundlePolicy",
"("
")"
"Lorg/webrtc/PeerConnection$BundlePolicy;",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getBundlePolicy);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getRtcpMuxPolicy = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getRtcpMuxPolicy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getRtcpMuxPolicy",
"("
")"
"Lorg/webrtc/PeerConnection$RtcpMuxPolicy;",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getRtcpMuxPolicy);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getTcpCandidatePolicy = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getTcpCandidatePolicy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getTcpCandidatePolicy",
"("
")"
"Lorg/webrtc/PeerConnection$TcpCandidatePolicy;",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getTcpCandidatePolicy);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getCandidateNetworkPolicy
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getCandidateNetworkPolicy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getCandidateNetworkPolicy",
"("
")"
"Lorg/webrtc/PeerConnection$CandidateNetworkPolicy;",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getCandidateNetworkPolicy);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getAudioJitterBufferMaxPackets
    = 0;
static jint Java_RTCConfiguration_getAudioJitterBufferMaxPackets(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getAudioJitterBufferMaxPackets",
"("
")"
"I",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getAudioJitterBufferMaxPackets);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getAudioJitterBufferFastAccelerate
    = 0;
static jboolean Java_RTCConfiguration_getAudioJitterBufferFastAccelerate(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getAudioJitterBufferFastAccelerate",
"("
")"
"Z",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getAudioJitterBufferFastAccelerate);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceConnectionReceivingTimeout
    = 0;
static jint Java_RTCConfiguration_getIceConnectionReceivingTimeout(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getIceConnectionReceivingTimeout",
"("
")"
"I",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceConnectionReceivingTimeout);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceBackupCandidatePairPingInterval
    = 0;
static jint Java_RTCConfiguration_getIceBackupCandidatePairPingInterval(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getIceBackupCandidatePairPingInterval",
"("
")"
"I",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceBackupCandidatePairPingInterval);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getKeyType = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getKeyType(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getKeyType",
"("
")"
"Lorg/webrtc/PeerConnection$KeyType;",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getKeyType);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getContinualGatheringPolicy
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getContinualGatheringPolicy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getContinualGatheringPolicy",
"("
")"
"Lorg/webrtc/PeerConnection$ContinualGatheringPolicy;",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getContinualGatheringPolicy);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceCandidatePoolSize =
    0;
static jint Java_RTCConfiguration_getIceCandidatePoolSize(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getIceCandidatePoolSize",
"("
")"
"I",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceCandidatePoolSize);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getPruneTurnPorts = 0;
static jboolean Java_RTCConfiguration_getPruneTurnPorts(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getPruneTurnPorts",
"("
")"
"Z",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getPruneTurnPorts);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getPresumeWritableWhenFullyRelayed
    = 0;
static jboolean Java_RTCConfiguration_getPresumeWritableWhenFullyRelayed(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getPresumeWritableWhenFullyRelayed",
"("
")"
"Z",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getPresumeWritableWhenFullyRelayed);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceCheckMinInterval =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getIceCheckMinInterval(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getIceCheckMinInterval",
"("
")"
"Ljava/lang/Integer;",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceCheckMinInterval);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getDisableIPv6OnWifi = 0;
static jboolean Java_RTCConfiguration_getDisableIPv6OnWifi(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getDisableIPv6OnWifi",
"("
")"
"Z",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getDisableIPv6OnWifi);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getMaxIPv6Networks = 0;
static jint Java_RTCConfiguration_getMaxIPv6Networks(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getMaxIPv6Networks",
"("
")"
"I",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getMaxIPv6Networks);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceRegatherIntervalRange
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getIceRegatherIntervalRange(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getIceRegatherIntervalRange",
"("
")"
"Lorg/webrtc/PeerConnection$IntervalRange;",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getIceRegatherIntervalRange);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getTurnCustomizer = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getTurnCustomizer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getTurnCustomizer",
"("
")"
"Lorg/webrtc/TurnCustomizer;",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getTurnCustomizer);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getDisableIpv6 = 0;
static jboolean Java_RTCConfiguration_getDisableIpv6(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getDisableIpv6",
"("
")"
"Z",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getDisableIpv6);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getEnableDscp = 0;
static jboolean Java_RTCConfiguration_getEnableDscp(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getEnableDscp",
"("
")"
"Z",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getEnableDscp);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getEnableCpuOveruseDetection
    = 0;
static jboolean Java_RTCConfiguration_getEnableCpuOveruseDetection(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getEnableCpuOveruseDetection",
"("
")"
"Z",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getEnableCpuOveruseDetection);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getEnableRtpDataChannel =
    0;
static jboolean Java_RTCConfiguration_getEnableRtpDataChannel(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getEnableRtpDataChannel",
"("
")"
"Z",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getEnableRtpDataChannel);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getSuspendBelowMinBitrate
    = 0;
static jboolean Java_RTCConfiguration_getSuspendBelowMinBitrate(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getSuspendBelowMinBitrate",
"("
")"
"Z",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getSuspendBelowMinBitrate);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getScreencastMinBitrate =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getScreencastMinBitrate(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getScreencastMinBitrate",
"("
")"
"Ljava/lang/Integer;",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getScreencastMinBitrate);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getCombinedAudioVideoBwe =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getCombinedAudioVideoBwe(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getCombinedAudioVideoBwe",
"("
")"
"Ljava/lang/Boolean;",
&g_org_webrtc_PeerConnection_00024RTCConfiguration_getCombinedAudioVideoBwe);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_00024RTCConfiguration_getEnableDtlsSrtp = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RTCConfiguration_getEnableDtlsSrtp(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_00024RTCConfiguration_clazz(env),
      "getEnableDtlsSrtp",
"("
")"
"Ljava/lang/Boolean;",
      &g_org_webrtc_PeerConnection_00024RTCConfiguration_getEnableDtlsSrtp);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_PeerConnection_getNativePeerConnection = 0;
static jlong Java_PeerConnection_getNativePeerConnection(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_PeerConnection_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_PeerConnection_clazz(env),
      "getNativePeerConnection",
"("
")"
"J",
      &g_org_webrtc_PeerConnection_getNativePeerConnection);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

#endif  // org_webrtc_PeerConnection_JNI
