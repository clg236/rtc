// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/MediaStreamTrack

#ifndef org_webrtc_MediaStreamTrack_JNI
#define org_webrtc_MediaStreamTrack_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaStreamTrack[];
const char kClassPath_org_webrtc_MediaStreamTrack[] =
    "org/webrtc/MediaStreamTrack";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaStreamTrack_00024State[];
const char kClassPath_org_webrtc_MediaStreamTrack_00024State[] =
    "org/webrtc/MediaStreamTrack$State";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaStreamTrack_00024MediaType[];
const char kClassPath_org_webrtc_MediaStreamTrack_00024MediaType[] =
    "org/webrtc/MediaStreamTrack$MediaType";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_MediaStreamTrack_clazz = 0;
#ifndef org_webrtc_MediaStreamTrack_clazz_defined
#define org_webrtc_MediaStreamTrack_clazz_defined
inline jclass org_webrtc_MediaStreamTrack_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaStreamTrack,
      &g_org_webrtc_MediaStreamTrack_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_MediaStreamTrack_00024State_clazz = 0;
#ifndef org_webrtc_MediaStreamTrack_00024State_clazz_defined
#define org_webrtc_MediaStreamTrack_00024State_clazz_defined
inline jclass org_webrtc_MediaStreamTrack_00024State_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaStreamTrack_00024State,
      &g_org_webrtc_MediaStreamTrack_00024State_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_MediaStreamTrack_00024MediaType_clazz = 0;
#ifndef org_webrtc_MediaStreamTrack_00024MediaType_clazz_defined
#define org_webrtc_MediaStreamTrack_00024MediaType_clazz_defined
inline jclass org_webrtc_MediaStreamTrack_00024MediaType_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaStreamTrack_00024MediaType,
      &g_org_webrtc_MediaStreamTrack_00024MediaType_clazz);
}
#endif

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_org_webrtc_MediaStreamTrack_00024State_fromNativeIndex = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_State_fromNativeIndex(JNIEnv* env, JniIntWrapper nativeIndex) {
  CHECK_CLAZZ(env, org_webrtc_MediaStreamTrack_00024State_clazz(env),
      org_webrtc_MediaStreamTrack_00024State_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaStreamTrack_00024State_clazz(env),
      "fromNativeIndex",
"("
"I"
")"
"Lorg/webrtc/MediaStreamTrack$State;",
      &g_org_webrtc_MediaStreamTrack_00024State_fromNativeIndex);

  jobject ret =
env->CallStaticObjectMethod(org_webrtc_MediaStreamTrack_00024State_clazz(env),
          method_id, as_jint(nativeIndex));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaStreamTrack_00024MediaType_getNative = 0;
static jint Java_MediaType_getNative(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaStreamTrack_00024MediaType_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaStreamTrack_00024MediaType_clazz(env),
      "getNative",
"("
")"
"I",
      &g_org_webrtc_MediaStreamTrack_00024MediaType_getNative);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaStreamTrack_00024MediaType_fromNativeIndex = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaType_fromNativeIndex(JNIEnv* env, JniIntWrapper nativeIndex) {
  CHECK_CLAZZ(env, org_webrtc_MediaStreamTrack_00024MediaType_clazz(env),
      org_webrtc_MediaStreamTrack_00024MediaType_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaStreamTrack_00024MediaType_clazz(env),
      "fromNativeIndex",
"("
"I"
")"
"Lorg/webrtc/MediaStreamTrack$MediaType;",
      &g_org_webrtc_MediaStreamTrack_00024MediaType_fromNativeIndex);

  jobject ret =
env->CallStaticObjectMethod(org_webrtc_MediaStreamTrack_00024MediaType_clazz(env),
          method_id, as_jint(nativeIndex));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_webrtc_MediaStreamTrack_JNI
