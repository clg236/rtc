// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/RtpReceiver

#ifndef org_webrtc_RtpReceiver_JNI
#define org_webrtc_RtpReceiver_JNI

#include <jni.h>

#include "../../../../../../../sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_RtpReceiver_00024Observer[];
const char kClassPath_org_webrtc_RtpReceiver_00024Observer[] =
    "org/webrtc/RtpReceiver$Observer";

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_RtpReceiver[];
const char kClassPath_org_webrtc_RtpReceiver[] = "org/webrtc/RtpReceiver";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_RtpReceiver_00024Observer_clazz = 0;
#ifndef org_webrtc_RtpReceiver_00024Observer_clazz_defined
#define org_webrtc_RtpReceiver_00024Observer_clazz_defined
inline jclass org_webrtc_RtpReceiver_00024Observer_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_RtpReceiver_00024Observer,
      &g_org_webrtc_RtpReceiver_00024Observer_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_webrtc_RtpReceiver_clazz
    = 0;
#ifndef org_webrtc_RtpReceiver_clazz_defined
#define org_webrtc_RtpReceiver_clazz_defined
inline jclass org_webrtc_RtpReceiver_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_RtpReceiver,
      &g_org_webrtc_RtpReceiver_clazz);
}
#endif

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_org_webrtc_RtpReceiver_00024Observer_onFirstPacketReceived = 0;
static void Java_Observer_onFirstPacketReceived(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    media_type) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpReceiver_00024Observer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_RtpReceiver_00024Observer_clazz(env),
      "onFirstPacketReceived",
"("
"Lorg/webrtc/MediaStreamTrack$MediaType;"
")"
"V",
      &g_org_webrtc_RtpReceiver_00024Observer_onFirstPacketReceived);

     env->CallVoidMethod(obj.obj(),
          method_id, media_type.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_webrtc_RtpReceiver_Constructor = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_RtpReceiver_Constructor(JNIEnv* env, jlong nativeRtpReceiver) {
  CHECK_CLAZZ(env, org_webrtc_RtpReceiver_clazz(env),
      org_webrtc_RtpReceiver_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_RtpReceiver_clazz(env),
      "<init>",
"("
"J"
")"
"V",
      &g_org_webrtc_RtpReceiver_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_RtpReceiver_clazz(env),
          method_id, nativeRtpReceiver);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_RtpReceiver_dispose = 0;
static void Java_RtpReceiver_dispose(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_RtpReceiver_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_RtpReceiver_clazz(env),
      "dispose",
"("
")"
"V",
      &g_org_webrtc_RtpReceiver_dispose);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

#endif  // org_webrtc_RtpReceiver_JNI
